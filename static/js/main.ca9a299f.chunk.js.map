{"version":3,"sources":["factories/Ship.js","factories/Gameboard.js","components/UserInterface.js","factories/Player.js","components/GameLoop.js","App.js","reportWebVitals.js","index.js"],"names":["Ship","shipType","ship","name","length","computerTypes","shipLength","newShip","find","element","computerShips","isHit","shipName","shipStatus","i","isSunk","shipDescriptions","changeAlignment","alignment","Gameboard","areCoordinatesEqual","shipCoordinates","newCoordinates","JSON","stringify","compareCoordinates","shipLocations","coordinates","j","createRow","column","board","recordHit","row","shipHit","newBoard","marker","splice","placeShip","concat","horizontalShip","verticalShip","checkHitValidity","checkOverlappingShips","createBoard","Array","fill","map","receiveAttack","eachShip","changeBoard","allShipsSunk","shipsSunk","console","log","shipPlacement","checkValidity","x","y","changeShipBoard","recordShip","UserInterface","props","playerText","computerText","placeShips","playerBoard","initiateAttack","computerSunk","computerBoard","placePlayerShips","resetGame","gameOver","className","id","type","onClick","slice","index","value","uniqid","Player","createUser","userName","userBoard","userStatus","selectTarget","hitOptions","Math","floor","random","hitAgain","selectUser","turn","randomCoordinate","randomAlignment","GameLoop","useState","parse","localStorage","getItem","setComputerBoard","setPlayerBoard","playerShipStatus","setPlayerShipStatus","computerShipStatus","setComputerShipStatus","computerShipLocations","setComputerShipLocations","playerShipLocations","setPlayerShipLocations","setTurn","setPlayerText","setComputerText","setPlaceShips","shipNumber","setShipNumber","setAlignment","setShipsSunk","setComputerSunk","useAI","setUseAI","attackOptions","setAttackOptions","setGameOver","ships","player","startGame","placeComputerShips","useEffect","setItem","shipTypes","parseInt","computerAlignment","computerPlay","getShipHit","newComputerShipStatus","computerResult","bind","event","preventDefault","target","getAttribute","charAt","displayResult","newShipStatus","attackResult","newShipLength","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca9a299f.chunk.js","sourcesContent":["// import Player from './Player.js';\n\nconst Ship = () => {\n\n  const shipType = {\n    ship: [\n      {name: 'carrier', length: 5},\n      {name: 'battleship', length: 4}, \n      {name: 'destroyer', length: 3},  \n      {name: 'submarine', length: 3},    \n      {name: 'patrol boat', length: 2},\n    ]\n  }\n\n  const shipDescriptions = () => {\n    return shipType;\n  }\n\n  const computerTypes = {\n    ship: [\n      {name: 'carrier', length: 5},\n      {name: 'battleship', length: 4}, \n      {name: 'destroyer', length: 3},  \n      {name: 'submarine', length: 3},    \n      {name: 'patrol boat', length: 2},\n    ]\n  }\n\n  const computerShips = () => {\n    return computerTypes;\n  }\n\n  const shipLength = (newShip) => {\n    let matchingShip = shipType.ship.find((element) => {\n      return (element.name === newShip);\n    })\n    return matchingShip.length;\n  };\n\n  const isHit = (shipName, shipStatus) => {\n    for (let i = 0; i < 5; i++) {\n      if (shipStatus.ship[i].name === shipName) {\n        shipStatus.ship[i].length--;\n      }\n    }\n    return shipStatus;\n  }\n \n  const isSunk = (shipName, shipStatus) => {\n    for (let i = 0; i < 5; i++) {\n      if (shipStatus.ship[i].name === shipName) {\n        return (shipStatus.ship[i].length === 0) ? true: false;\n      }\n    }\n  }\n\n  const changeAlignment = (alignment) => {\n    if(alignment === 'horizontal') {\n      return 'vertical';\n    } else {\n      return 'horizontal';\n    }\n  }\n\n  return { shipLength, computerShips, isHit, isSunk, shipDescriptions, changeAlignment }\n}\n\nexport default Ship;\n\n","import Ship from './Ship.js';\n\nconst Gameboard = () => {\n\n  const testCoordinateValidity = (x, y) => {\n    if (x < 0 || x > 9 || y < 0 || y > 9) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  const areCoordinatesEqual = (shipCoordinates, newCoordinates) => {\n    return (JSON.stringify(shipCoordinates) === JSON.stringify(newCoordinates));\n  }\n\n  const compareCoordinates= (newCoordinates, shipLocations) => {\n    for (let i = 0; i < shipLocations.length; i++) {\n      let shipCoordinates = shipLocations[i].ship[0].coordinates;\n      for (let j = 0; j < shipCoordinates.length; j++) {\n        if (areCoordinatesEqual(shipCoordinates[j], newCoordinates)) {\n          return shipLocations[i].ship[0].name;\n        }\n      }\n    }\n  }\n\n  const checkValidity = (shipType, column, row, alignment) => {\n    let shipCoordinates = placeShip(shipType, column, row, alignment);\n    for (let i = 0; i < shipCoordinates.length; i++) {\n      if (testCoordinateValidity(shipCoordinates[i][0], shipCoordinates[i][1]) === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const checkOverlappingShips = (shipType, column, row, alignment, shipLocations) => {\n    let shipCoordinates = placeShip(shipType, column, row, alignment);\n    for (let i = 0; i < shipCoordinates.length; i++) {\n      if (compareCoordinates(shipCoordinates[i], shipLocations)) {\n        return true\n      }\n    }\n    return false;\n  }\n\n  const createBoard = () => {\n    // eslint-disable-next-line no-unused-vars\n    let newBoard = Array(10).fill(0).map(row => new Array(10).fill('water'));\n    return newBoard;\n  }\n\n  const createRow = (column, board) => {\n    return board[column];\n  }\n\n  const shipHit = (column, row, shipLocations) => {\n    let newCoordinates = [column, row];\n    return compareCoordinates(newCoordinates, shipLocations);\n  }\n\n  const recordHit = (column, row, board, shipHit) => {\n    let newBoard = createRow(column, board);\n    let marker = shipHit ? 'hit': 'miss';\n    newBoard.splice(row, 1, marker);\n    return newBoard;\n  }\n\n  const recordShip = (column, row, board) => {\n    let newBoard = createRow(column, board);\n    let marker = 'ship';\n    newBoard.splice(row, 1, marker);\n    return newBoard;\n  }\n\n  const changeBoard = (row, column, board, shipHit) => {\n    board.splice(column, 1, recordHit(column, row, board, shipHit));\n    return board;\n  }\n\n  const changeShipBoard = (row, column, board) => {\n    board.splice(column, 1, recordShip(column, row, board));\n    return board;\n  } \n\n  const horizontalShip = (shipType, column, row) => {\n    let shipCoordinates = [];\n    for (let i = 0; i < Ship().shipLength(shipType); i++) {\n      shipCoordinates = shipCoordinates.concat([\n        [column,\n         row + i\n        ]\n      ]);\n    }\n    return shipCoordinates;\n  }\n\n  const verticalShip = (shipType, column, row) => {\n    let shipCoordinates = [];\n    for (let i = 0; i < Ship().shipLength(shipType); i++) {\n      shipCoordinates = shipCoordinates.concat([\n        [column + i,\n         row\n        ]\n      ]);\n    }\n    return shipCoordinates;\n  }\n\n  const placeShip = (shipType, column, row, alignment) => {\n    if (alignment === 'horizontal') {\n      return horizontalShip(shipType, column, row);\n    } else {\n      return verticalShip(shipType, column, row);\n    }\n  }\n\n  const receiveAttack = (shipCoordinates, column, row) => {\n    for (let i = 0; i < shipCoordinates.length; i++) {\n      let eachShip = shipCoordinates[i].ship[0].coordinates;\n      for (let j = 0; j < eachShip.length; j++) {\n        if (JSON.stringify(eachShip[j]) === JSON.stringify([column, row])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  const checkHitValidity = (row, column, board) => {\n    if (board[row][column] === 'water' || board[row][column] === 'ship') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const shipPlacement = (shipType, column, row, alignment, shipLocations) => {\n    let placedShip = placeShip(shipType, column, row, alignment);\n    const newShip = {\n      ship: [\n        {name: shipType, coordinates: placedShip}\n      ]\n    }\n    shipLocations = shipLocations.concat(newShip);\n    return shipLocations;\n  }\n\n  const allShipsSunk = (shipsSunk) => {\n    console.log(shipsSunk);\n    return (shipsSunk >= 5) ? true: false\n  };\n  \n  return {\n    checkHitValidity, \n    checkOverlappingShips, \n    createBoard, \n    placeShip, \n    receiveAttack, \n    recordHit, \n    changeBoard, \n    allShipsSunk, \n    shipPlacement, \n    shipHit, \n    checkValidity,\n    changeShipBoard,\n  };\n}\n\n  export default Gameboard;","import React from \"react\";\nimport '../styles/gameboard.css';\nimport uniqid from 'uniqid';\n/* eslint-disable react/prop-types */\n\nconst UserInterface = (props) => {\n  const {\n    playerText,\n    computerText,\n    changeAlignment,\n    placeShips,\n    shipsSunk,\n    playerBoard,\n    initiateAttack,\n    computerSunk,\n    computerBoard,\n    placePlayerShips,\n    resetGame,\n    gameOver,\n  } = props;\n\n  return (\n    <div>\n    <div className = 'dialogue'>\n      <ul>\n        <li>{playerText}</li>\n        <li>{computerText}</li>\n          {placeShips ?\n          <li><div className = 'toggle'>\n            horizontal\n            <label className = 'switch' id = 'toggle'>\n              <input \n                type = 'checkbox' \n                id = 'check'\n                onClick = {changeAlignment}/>\n                <span className = 'slider round'></span>\n            </label>\n              vertical\n          </div></li>\n          : null\n          }\n      </ul>  \n    </div>\n\n      <div>\n      {placeShips ? null:\n        <div className = 'player'>\n          <h2>Opponent</h2>\n          <h3>Sunk: {shipsSunk}/5</h3>\n          <table>\n            {playerBoard.slice(0, 10).map((column, index) => {\n              return (\n                <tbody key = {uniqid()}>\n                  <tr>\n                    <td \n                      key = {uniqid()}\n                      className = {column[0]}\n                      value = {'0' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[1]}\n                      value = {'1' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[2]}\n                      value = {'2' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[3]}\n                      value = {'3' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[4]}\n                      value = {'4' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td                   \n                      key = {uniqid()}\n                      className = {column[5]}\n                      value = {'5' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[6]}\n                      value = {'6' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[7]}\n                      value = {'7' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[8]}\n                      value = {'8' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[9]}\n                      value = {'9' + index}\n                      onClick = {gameOver ? null: initiateAttack}\n                    ></td>\n                  </tr>\n                </tbody>\n              );\n            })}\n          </table>\n      </div>\n    }\n\n      <div className = 'computer'>\n        <h2>Player</h2>\n        <h3>sunk: {computerSunk}/5</h3>\n          <table>\n            {computerBoard.slice(0, 10).map((column, index) => {\n              return (\n                <tbody key = {uniqid()}>\n                  <tr>\n                    <td \n                      key = {uniqid()}\n                      className = {column[0]}\n                      value = {'0' + (index)}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[1]}\n                      value = {'1' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[2]}\n                      value = {'2' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[3]}\n                      value = {'3' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[4]}\n                      value = {'4' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td                   \n                      key = {uniqid()}\n                      className = {column[5]}\n                      value = {'5' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[6]}\n                      value = {'6' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[7]}\n                      value = {'7' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[8]}\n                      value = {'8' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                    <td \n                      key = {uniqid()}\n                      className = {column[9]}\n                      value = {'9' + index}\n                      onClick = {placeShips ? placePlayerShips: null}\n                    ></td>\n                  </tr>\n                </tbody>\n            );\n          })}\n        </table>\n      </div>\n\n      <div>\n        <button \n          className = 'reset'\n          onClick = {resetGame}\n        >\n          Start New Game          \n        </button>\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default UserInterface;","const Player = () => {\n\n  const createUser = (userName, userBoard, userStatus) => ({ userName, userBoard, userStatus });\n  \n  const selectUser = (turn) => {\n    if (turn % 2 === 0 ) {\n    return createUser('human', 'playerBoard', 'playerShipStatus');\n    } else {\n    return createUser('computer', 'computerBoard', 'computerShipStatus');\n    }\n  }\n\n  const randomCoordinate = () => {\n    return Math.floor(Math.random() * 10);\n  }\n  \n  const randomAlignment = () => {\n    let randomNumber = Math.floor(Math.random() * 2);\n    return (randomNumber === 0) ? 'horizontal': 'vertical';\n  }\n\n  const hitAgain = (row, column) => {\n    let hitOptions = [[row, (column - 1)], [row, (column + 1)], [(row - 1), column], [(row + 1), column]];\n    return hitOptions;\n  }\n\n  const selectTarget = (hitOptions) => {\n    let selectRandomTarget = Math.floor(Math.random() * hitOptions.length);\n    return hitOptions[selectRandomTarget];\n  }\n\n  return { \n    selectTarget,\n    hitAgain,\n    selectUser, \n    randomCoordinate, \n    randomAlignment \n  };\n}\n\nexport default Player;","import React, { useEffect, useState } from 'react';\nimport Gameboard from '../factories/Gameboard.js'\nimport UserInterface from '../components/UserInterface';\nimport '../styles/gameboard.css';\nimport Ship from '../factories/Ship.js';\nimport Player from '../factories/Player.js';\n\nconst GameLoop = () => {\n\n  // sets React states\n\n  const [computerBoard, setComputerBoard] = useState(\n    JSON.parse(localStorage.getItem('savedComputerBoard')) || []);\n  const [playerBoard, setPlayerBoard] = useState(\n    JSON.parse(localStorage.getItem('savedPlayerBoard')) || []);\n  const [playerShipStatus, setPlayerShipStatus] = useState([]);\n  const [computerShipStatus, setComputerShipStatus] = useState([]);\n  const [computerShipLocations, setComputerShipLocations] = useState([]);\n  const [playerShipLocations, setPlayerShipLocations] = useState([]);\n  const [turn, setTurn] = useState(0);\n  const [playerText, setPlayerText] = useState('');\n  const [computerText, setComputerText] = useState('');\n  const [placeShips, setPlaceShips] = useState(true);\n  const [shipNumber, setShipNumber] = useState(0);\n  const [alignment, setAlignment] = useState('horizontal');\n  const [shipsSunk, setShipsSunk] = useState('0');\n  const [computerSunk, setComputerSunk] = useState('0');\n  const [useAI, setUseAI] = useState(false);\n  const [attackOptions, setAttackOptions] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n\n  // defines destructuring assignment\n\n  const board = Gameboard();\n  const ships = Ship();\n  const player = Player();\n\n  // establishes starting states\n\n  const startGame = () => {\n    setPlayerBoard(board.createBoard());\n    setComputerBoard(board.createBoard());\n    setPlayerShipStatus(ships.shipDescriptions());\n    setComputerShipStatus(ships.computerShips());\n    placeComputerShips();\n    setPlayerText('Click square to place carrier on the board.')\n  }\n\n  useEffect(() => {\n    startGame();\n  }, [])\n\n  // stores saved arrays in local storage\n\n  useEffect(() => {\n    localStorage.setItem('savedPlayerBoard', JSON.stringify(playerBoard));\n  }, [playerBoard])\n\n  useEffect(() => {\n    localStorage.setItem('savedComputerBoard', JSON.stringify(computerBoard));\n  }, [computerBoard])\n\n  useEffect(() => {\n    if (board.allShipsSunk(shipsSunk)) {\n      setComputerText('');\n      setPlayerText('All ships have been sunk. You win!');\n      setGameOver(true);\n    } \n  }, [shipsSunk])\n\n  useEffect(() => {\n    if (board.allShipsSunk(computerSunk)) {\n      setPlayerText('');\n      setComputerText('All ships have been sunk. Opponent wins!');\n      setGameOver(true);\n    }\n  }, [computerSunk])\n\n  // resets game upon pressing button\n\n  const resetGame = (event) => {\n    event.preventDefault();\n    setComputerBoard([]);\n    setComputerText('');\n    setComputerShipLocations([]);\n    setPlayerShipLocations([]);\n    setTurn(0);\n    setPlaceShips(true);\n    setShipNumber(0);\n    setAlignment('horizontal');\n    setShipsSunk('0');\n    setComputerSunk('0');\n    setGameOver(false);\n    startGame();\n  }\n\n  //changes ship alignment\n\n  const changeAlignment = () => {\n    setAlignment(ships.changeAlignment(alignment));\n  }\n\n  // places computer ships on board\n \n  const placeComputerShips = () => {\n    let shipLocations = [];\n    const shipTypes = ['carrier', 'battleship', 'destroyer', 'submarine', 'patrol boat'];\n    for (let i = 0; i < 5; i++) {\n      const row = parseInt(player.randomCoordinate());\n      const column = parseInt(player.randomCoordinate());\n      const computerAlignment = player.randomAlignment();\n      const newShipLocations = ([]);\n      if (!board.checkOverlappingShips(shipTypes[i], row, column, computerAlignment, shipLocations)\n        && board.checkValidity(shipTypes[i], row, column, computerAlignment)\n        ) {\n          let newShip = board.shipPlacement(shipTypes[i], row, column, computerAlignment, newShipLocations);\n          shipLocations = shipLocations.concat(newShip);\n        } else {\n          i--;\n        }\n      setComputerShipLocations(shipLocations);\n    }\n  }\n\n  // places player's ships on board\n\n  const placeShip = (newShip) => {\n    const newShipLength = newShip[0].ship[0].coordinates.length;\n    const newBoard = JSON.parse(localStorage.getItem('savedComputerBoard'));\n    for (let i = 0; i < newShipLength; i++) {\n      const row  = newShip[0].ship[0].coordinates[i][0];\n      const column = newShip[0].ship[0].coordinates[i][1];\n      setComputerBoard(board.changeShipBoard(column, row, newBoard));\n    }\n  }\n\n  const placePlayerShips = (event) => {\n    event.preventDefault();\n    const coordinates = event.target.getAttribute('value');\n    const shipTypes = ['carrier', 'battleship', 'destroyer', 'submarine', 'patrol boat'];\n    const column = parseInt(coordinates.charAt(0));\n    const row = parseInt(coordinates.charAt(1));\n    const newShipLocations = ([]);\n    if (!board.checkOverlappingShips(shipTypes[shipNumber], row, column, alignment, playerShipLocations)\n      && board.checkValidity(shipTypes[shipNumber], row, column, alignment)\n      ) {\n        const newShip = board.shipPlacement(shipTypes[shipNumber], row, column, alignment, newShipLocations);\n        placeShip(newShip);\n        setPlayerShipLocations(playerShipLocations => playerShipLocations.concat(newShip));\n        if (shipNumber < 4) {\n          setPlayerText('Click square to place ' + shipTypes[shipNumber + 1] + ' on the board.')\n          setShipNumber(shipNumber => shipNumber + 1);\n        } else {\n          setPlayerText('The battle begins! Attack your opponents board.')\n          setPlaceShips(false);\n        }\n    } else {\n      setPlayerText('Ships may not overlap and must be on the board. Place ' + shipTypes[shipNumber + 1] + ' again.');\n    }\n  }\n\n  // player's attack is recorded\n\n  const attackResult = (getShipHit, playerShipStatus) => {\n    const newShipStatus = ships.isHit(getShipHit, playerShipStatus);\n    setPlayerShipStatus(newShipStatus);\n\n    if (ships.isSunk(getShipHit, newShipStatus)) {\n        setShipsSunk(shipsSunk => parseInt(shipsSunk + 1));\n        return('Opponent\\'s ' + getShipHit + ' is sunk!');\n    } else {\n      return (' Your attack hit a ship!  ');\n    }\n  }\n\n  const initiateAttack = (event) => {\n    event.preventDefault();\n    let coordinates = event.target.getAttribute('value');\n    let newBoard = JSON.parse(localStorage.getItem('savedPlayerBoard'));\n    const column = parseInt(coordinates.charAt(0));\n    const row = parseInt(coordinates.charAt(1));\n    if (board.checkHitValidity(row, column, newBoard)) {\n      let isShipHit = (board.receiveAttack(computerShipLocations, row, column));\n      if (isShipHit) {\n          const getShipHit = board.shipHit(row, column, computerShipLocations);\n          setPlayerBoard(board.changeBoard(column, row, newBoard, true));\n          const displayResult = attackResult(getShipHit, playerShipStatus);\n          setPlayerText(displayResult);\n      } else {\n        setPlayerBoard (board.changeBoard(column, row, newBoard, false));\n        setPlayerText(' Your attack missed. ');\n      }\n      setTurn(turn => (turn + 1));\n    } else {\n      setPlayerText('Coordinate has already been hit. Try again.')\n    }\n  }\n\n  // computer's attack is recorded\n\n  const computerResult = (getShipHit, computerShipStatus) => {\n    const newComputerShipStatus = ships.isHit(getShipHit, computerShipStatus);\n    setComputerShipStatus(newComputerShipStatus);\n    if (ships.isSunk(getShipHit, newComputerShipStatus)) {\n      setComputerSunk(computerSunk => parseInt(computerSunk + 1));\n      return ('Your ' + getShipHit + ' is sunk!');\n    } else {\n      return (' Opponent\\'s attack hit a ship!  ');\n    }\n  }\n\n  const computerPlay = (column, row) => {\n    let newBoard = JSON.parse(localStorage.getItem('savedComputerBoard'));\n\n      // determines validity of coordinate to attack\n\n    if (board.checkHitValidity(row, column, newBoard)) {\n      setComputerBoard(board.changeBoard(column, row, newBoard));\n\n      // determines if attack hits a ship\n\n      let isHit = (board.receiveAttack(playerShipLocations, row, column));\n      if (isHit) {\n        setComputerBoard(board.changeBoard(column, row, newBoard, true));\n        const getShipHit = board.shipHit(row, column, playerShipLocations);\n        setComputerText(computerResult(getShipHit, computerShipStatus));\n        setAttackOptions(player.hitAgain(row, column));\n        setUseAI(true);\n      } else {\n        setComputerBoard (board.changeBoard(column, row, newBoard, false));\n        setComputerText('Opponent\\'s attack missed. ');\n      }\n\n      // allows player to play next turn or attempts to return a valid hit\n      gameOver ? null: setTurn(turn => turn + 1);\n    } else {\n      gameOver ? null: setTurn(turn => turn + 2);\n    }\n  }\n\n  // computer plays turn\n\n  useEffect(() => {\n    if (Player().selectUser(turn).userName === 'computer') {\n      if (useAI) {\n        let coordinates = Player().selectTarget(attackOptions);\n        let row = coordinates[0];\n        let column = coordinates[1];\n        computerPlay(column, row);\n        setUseAI(false);\n      } else {\n        let column = Player().randomCoordinate();\n        let row = Player().randomCoordinate();\n        computerPlay(column, row);\n      }\n  }\n  }, [turn])\n\n  return (\n    <div className={`game-board`}>\n      <h1>Battleship</h1>\n      <UserInterface\n        playerText = {playerText}\n        computerText = {computerText}\n        changeAlignment = {changeAlignment.bind(this)}\n        placeShips = {placeShips}\n        shipsSunk = {shipsSunk}\n        playerBoard = {playerBoard}\n        initiateAttack = {initiateAttack.bind(this)}\n        computerSunk = {computerSunk}\n        computerBoard = {computerBoard}\n        placePlayerShips = {placePlayerShips.bind(this)}\n        resetGame = {resetGame.bind(this)}\n        gameOver = {gameOver}\n      />\n    </div>      \n  );\n}\n\nexport default GameLoop;","import './styles/App.css';\nimport React from 'react';\nimport GameLoop from './components/GameLoop';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <GameLoop/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}